plugins {
    id 'java'
    id 'info.solidsoft.pitest' version '1.1.11'
}

group 'PredictorFactory'
version '3.3.9'
sourceCompatibility = 1.8


// Repository
repositories {
    mavenCentral()
}


// Dependencies
dependencies {
    compile 'org.antlr:antlr4:4.5.3'                // Parser
    compile 'org.apache.commons:commons-lang3:3.5'  // Text processing utility
    compile 'com.google.guava:guava:20.0'           // Convenience library
    compile 'com.zaxxer:HikariCP:2.5.1'             // Versions 2.4.2 and 2.4.3 do not release connections -> do not use them
    compile 'org.slf4j:slf4j-log4j12:1.7.21'        // Logging (required by Hikari)
    compile 'log4j:log4j:1.2.17'                    // Logging (why not JUL? Because of the superior PatternLayout)
//    compile 'org.sql2o:sql2o:1.5.4'               // Experimental, could work
//    compile 'org.codejargon:fluentjdbc:1.3.5'     // Experimental
    compile 'com.github.rjeschke:txtmark:0.13'      // Markdown for GUI
    compile 'com.intellij:annotations:12.0'         // Not null annotation
    compile 'org.hibernate:hibernate-core:5.2.5.Final' // Experimental for SQL formatting (but exports only into plaintext, does not play well with postgre's "mode")
    compile 'com.atlassian.commonmark:commonmark:0.8.0' // Experimental Markdown
    compile "org.codehaus.groovy:groovy-all:2.4.10" // Have to be in compile section for Spock
    compile "org.controlsfx:controlsfx:8.40.13"    // For CheckComboBox in GUI

    runtime fileTree(dir: 'lib/jdbc-driver/hsqldb', include: '*.jar')   // The search is not recursive -> list all directories
    runtime fileTree(dir: 'lib/jdbc-driver/jtds', include: '*.jar')
    runtime fileTree(dir: 'lib/jdbc-driver/monetdb', include: '*.jar')
    runtime fileTree(dir: 'lib/jdbc-driver/mssql', include: '*.jar')
    runtime fileTree(dir: 'lib/jdbc-driver/mysql', include: '*.jar')
    runtime fileTree(dir: 'lib/jdbc-driver/oracle', include: '*.jar')
    runtime fileTree(dir: 'lib/jdbc-driver/postgresql', include: '*.jar')
    runtime fileTree(dir: 'lib/jdbc-driver/postgresql-ng', include: '*.jar')
    runtime fileTree(dir: 'lib/jdbc-driver/sas', include: '*.jar')
    runtime fileTree(dir: 'lib/jdbc-driver/teradata', include: '*.jar')
    runtime fileTree(dir: 'lib/jdbc-driver/vertica', include: '*.jar')
    runtime fileTree(dir: 'lib/jdbc-driver/voltdb', include: '*.jar')

    compile fileTree(dir: 'lib/sqlformatter', include: '*.jar') // But fails on "mode" in postgre sql...
    compile fileTree(dir: 'lib/SQLinForm', include: '*.jar') // Ok
    compile fileTree(dir: 'lib', include: '*.jar')

    testCompile fileTree(dir: 'lib/rapidminer', include: '*.jar')
    testCompile 'junit:junit:4.12'
    testCompile 'info.solidsoft.spock:spock-global-unroll:0.5.0'    // Automatic unrolling of spock tests: https://solidsoft.wordpress.com/tag/mutation-testing/
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'

}


// Directory structure
sourceSets {
    main {
        java {
            srcDirs = ['src', 'antlr', 'gui']
        }
        resources {
            srcDirs = ['src/resources', 'gui/resources']
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}


// How to build the jar file
jar {
    manifest {
        attributes(
            'Class-Path': configurations.runtime.collect { "lib/$it.name" }.join(' '),  // Where to look for .jars
            'Main-Class': 'controller.MainApp', //  What to execute. For CLI: run.Launcher
            'Implementation-Version': version   // To be able to read it during the runtime
        )
    }
}


// Deployment task
task deploy(dependsOn: 'jar') {
    doFirst {
        copy {
            from "$buildDir/$libsDirName"
            into "$buildDir/output"
        }
        copy {
            from configurations.runtime + configurations.compile
            into "$buildDir/output/lib"
        }
        copy {
            from 'pattern'
            into "$buildDir/output/pattern"
        }
        copy {
            from 'pattern_bkp'
            into "$buildDir/output/pattern"
        }
        copy {
            from 'config'
            into "$buildDir/output/config"
            exclude 'journal.xml'
        }
        copy {
            from 'config/log4j.properties'
            into "$buildDir/output/config"
            filter { String line -> line.replaceAll('log4j.rootLogger=DEBUG, CA, FA, XML, CNT', 'log4j.rootLogger=DEBUG, CA, FA, XML, CNT, GUI') }
        }
        copy {
            from 'LICENSE.txt'
            into "$buildDir/output"
        }
    }
}

// Make a zip file
task zip(type: Zip, dependsOn: 'deploy') {
    from "$buildDir/output"
    version = null
}


// Mutation testing
pitest {
    targetClasses = ['extraction.Journal']
    targetTests = ['extraction.JournalTest']
    threads = 4
    excludedMethods = ['toString']
    timestampedReports = false
    verbose = true
}

