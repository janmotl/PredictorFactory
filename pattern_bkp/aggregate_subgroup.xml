<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<pattern>
	<name>Aggregate subgroup</name>
	<description>
		Applies aggregation function on a subgroup of numerical attributes.

		This pattern can be ridiculously slow, but it can provide good predictors.
	</description>
	<note>
		Note: The pattern fails in following conditions:
			- If @nominalColumn is an id-like column and stddev_samp function is used. (Because std of
			  a single value gives null).
			- When the @value doesn't appear in the propagated table. This can happen because unique
			  values are collected from the unpropagated tables. And same records may not make it into the propagated
			  tables because of time constraints or missing links (e.g. a person may not be propagated into table job,
			  if the person is jobless). A remedy for this problem would be to collect unique values on the propagated
			  tables. But then we could be forced to do much more work than before (e.g. if there are loops in the
			  schema, the same table can be propagated several times).
			- When the @value appears just once in the original table. And stddev_samp is applied.
	</note>
	<example>
		Total price of returned products.
	</example>
	<author>Jan Motl</author>
	<date>2015-04-12</date>
	<code>SELECT @base
			   , @aggregateFunction(@numericalColumn) AS @columnName
	      FROM @propagatedTable
	      WHERE @nominalColumn = '@value'
	      GROUP BY @base
	</code>
    <parameter key="@aggregateFunction" value="stddev_samp, avg, min, max, sum"/>
	<cardinality>n</cardinality>
</pattern>
