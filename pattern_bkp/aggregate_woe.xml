<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<pattern>
	<name>Aggregate WOE</name>
	<description>Weight of evidence.

		In comparison to the textbook formulation this implementation takes care of:
			1) Missing values (they are treated as a separate category)
			2) Zero probabilities (with Laplace correction)
			3) Polynomial target
			4) Leaking target values (by using leave one out trick - it is fast as we just subtract the current target value from the global results)

		Note that WoE still ignores confidence of the estimates. For example, if we have 2 positive samples and
		5 negative samples, we get the same WoE as if we had 2000 positive samples and 5000 negative samples.
		Intuitively, the second scenario should result into a value further from zero. Nevertheless, this problem is
		partially solved with leave-one-out: with small sample size, the variance of the estimate is higher.

		The implementation is from: https://qizeresearch.wordpress.com/2014/05/21/utilize-woe-to-replace-dummy-variables/

		To avoid division by zero and logarithm of zero in evaluation of WoE we use the Laplace correction.
		Laplacean correction is from: http://shigglesblog.blogspot.com/2013/07/weight-of-evidence.html

		The empirical evidence suggests that Laplacean correction improves AUC by 5 percent points.
			See: http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1918410

		Target value is always treated as a string because databases automatically cast numbers to strings, if necessary.
		But databases do not automatically cast strings to numbers. Hence, treating the target value as a string works
		for both, numerical and string targets.

		NOTE: We do not calculate WoE for NULL category. An example of implementation where See: http://support.sas.com/resources/papers/proceedings13/095-2013.pdf
			or https://cran.r-project.org/web/packages/Causata/Causata.pdf
			Test for missing values in both, the attribute and the target.
			Missing values should be treated as a special category as explained at: http://multithreaded.stitchfix.com/blog/2015/08/13/weight-of-evidence/


		Multi-class WoE: http://dspace.library.uu.nl/bitstream/handle/1874/11641/c4.pdf

		NOTE: Training and testing data are getting mixed -> expect overly optimistic estimates.

		NOTE: WORKS ONLY ON BINARY TARGETS! -> produce a column for each target class

		NOTE: Interestingly enough, average of woe works better than sum of woe.

		NOTE: Oracle may require specifying logarithm base.

		Some other predictors are mentioned in ACORA (Provost).

	</description>
	<author>Jan Motl</author>
	<date>2015-03-08</date>
	<code> SELECT a.@base
				, avg(woe.woe) @columnName
			FROM @propagatedTable a
			JOIN (
				 SELECT @column
				 	  , log(((sum(case when @baseTarget='@targetValue' then 1.0 else 0 end)+1)/avg(total.total_default))
				 / ((sum(case when @baseTarget &lt;&gt; '@targetValue' then 1.0 else 0 end)+1)/avg(total.total_nondefault)))*100
				 as woe
				 FROM @propagatedTable
					  , (SELECT sum(case when @baseTarget='@targetValue' then 1.0 else 0 end)+2 as total_default
					          , sum(case when @baseTarget &lt;&gt; '@targetValue' then 1.0 else 0 end)+2 as total_nondefault
					  FROM @propagatedTable) total
				 GROUP BY @column
				 ) woe
			on a.@column = woe.@column
			GROUP BY a.@base
	</code>
	<parameter key="@column" value="@nominalColumn, @idColumn"/>
	<cardinality>n</cardinality>
</pattern>
