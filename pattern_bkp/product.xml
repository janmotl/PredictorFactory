<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<pattern>
	<name>Product</name>
	<description>
		Calculate product of numbers.
		
		Because not all databases implement product aggregate, the workaround is using logarithms:
			log(a*b*c...*n)=log(a)+log(b)+log(c)...+log(n)
		The implementation is from:
			http://stackoverflow.com/questions/3912204/why-is-there-no-product-aggregate-function-in-sql
			
		NOTE: Can easily result into overflow -> could return directly the logarithm. But what to return,
		when the product is zero?

		This is a very slow pattern.
	</description>
	<example>
		Product of yields (qty_out / qty_in).
		Product of (independent) probabilities.
	</example>
	<author>Jan Motl</author>
	<date>2015-03-15</date>
	<code compatibility="PostgreSQL">SELECT @base
		       , CASE
			       WHEN MinVal = 0 THEN 0
			       WHEN Neg::Integer % 2 = 1 THEN -1 * EXP(ABSMult)
			       ELSE EXP(ABSMult)
			   END @columnName
		  FROM
		    (
		    SELECT @base
		       --log of positive row values
		       , SUM(LN(ABS(NULLIF(@numericalColumn, 0)))) AS ABSMult
		       --count of negative values
		       , SUM(SIGN(CASE WHEN @numericalColumn &lt; 0 THEN 1 ELSE 0 END)) AS Neg
		       --anything * zero = zero
		       , MIN(ABS(@numericalColumn)) AS MinVal
		    FROM @propagatedTable
		    GROUP BY @base
		    ) foo
	</code>
	<code compatibility="Oracle">SELECT @base
		       , CASE
			       WHEN MinVal = 0 THEN 0
			       WHEN MOD(Neg, 2) = 1 THEN -1 * EXP(ABSMult)
			       ELSE EXP(ABSMult)
			   END @columnName
		  FROM
		    (
		    SELECT @base
		       --log of positive row values
		       , SUM(LN(ABS(NULLIF(@numericalColumn, 0)))) AS ABSMult
		       --count of negative values
		       , SUM(SIGN(CASE WHEN @numericalColumn &lt; 0 THEN 1 ELSE 0 END)) AS Neg
		       --anything * zero = zero
		       , MIN(ABS(@numericalColumn)) AS MinVal
		    FROM @propagatedTable
		    GROUP BY @base
		    ) foo
	</code>
	<cardinality>n</cardinality>
</pattern>
