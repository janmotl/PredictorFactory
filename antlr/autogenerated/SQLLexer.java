// Generated from /Users/jan/Documents/Git/PredictorFactory/antlr/parser/SQL.g4 by ANTLR 4.5.3
package autogenerated;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SQLLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		FROM=1, JOIN=2, ON=3, AND=4, USING=5, DATEDIFF=6, DATETONUMBER=7, CORR=8, 
		LBR=9, RBR=10, COMMA=11, EQUALS=12, ARITHMETIC=13, TEXT=14, WS=15;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"FROM", "JOIN", "ON", "AND", "USING", "DATEDIFF", "DATETONUMBER", "CORR", 
		"LBR", "RBR", "COMMA", "EQUALS", "ARITHMETIC", "TEXT", "WS"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, null, null, null, null, "'('", "')'", "','", 
		"'='"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "FROM", "JOIN", "ON", "AND", "USING", "DATEDIFF", "DATETONUMBER", 
		"CORR", "LBR", "RBR", "COMMA", "EQUALS", "ARITHMETIC", "TEXT", "WS"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public SQLLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "SQL.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\21d\b\1\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\3\2\3\2\3\2\3\2\3\2"+
		"\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r"+
		"\3\r\3\16\3\16\3\17\6\17_\n\17\r\17\16\17`\3\20\3\20\2\2\21\3\3\5\4\7"+
		"\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21\3\2"+
		"\25\4\2HHhh\4\2TTtt\4\2QQqq\4\2OOoo\4\2LLll\4\2KKkk\4\2PPpp\4\2CCcc\4"+
		"\2FFff\4\2WWww\4\2UUuu\4\2IIii\4\2VVvv\4\2GGgg\4\2DDdd\4\2EEee\6\2,-/"+
		"/\61\61``\t\2\13\f\17\17\"\"*/\61\61??``\5\2\13\f\17\17\"\"d\2\3\3\2\2"+
		"\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3"+
		"\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2"+
		"\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\3!\3\2\2\2\5&\3\2\2\2\7+\3\2"+
		"\2\2\t.\3\2\2\2\13\62\3\2\2\2\r8\3\2\2\2\17A\3\2\2\2\21N\3\2\2\2\23S\3"+
		"\2\2\2\25U\3\2\2\2\27W\3\2\2\2\31Y\3\2\2\2\33[\3\2\2\2\35^\3\2\2\2\37"+
		"b\3\2\2\2!\"\t\2\2\2\"#\t\3\2\2#$\t\4\2\2$%\t\5\2\2%\4\3\2\2\2&\'\t\6"+
		"\2\2\'(\t\4\2\2()\t\7\2\2)*\t\b\2\2*\6\3\2\2\2+,\t\4\2\2,-\t\b\2\2-\b"+
		"\3\2\2\2./\t\t\2\2/\60\t\b\2\2\60\61\t\n\2\2\61\n\3\2\2\2\62\63\t\13\2"+
		"\2\63\64\t\f\2\2\64\65\t\7\2\2\65\66\t\b\2\2\66\67\t\r\2\2\67\f\3\2\2"+
		"\289\t\n\2\29:\t\t\2\2:;\t\16\2\2;<\t\17\2\2<=\t\n\2\2=>\t\7\2\2>?\t\2"+
		"\2\2?@\t\2\2\2@\16\3\2\2\2AB\t\n\2\2BC\t\t\2\2CD\t\16\2\2DE\t\17\2\2E"+
		"F\t\16\2\2FG\t\4\2\2GH\t\b\2\2HI\t\13\2\2IJ\t\5\2\2JK\t\20\2\2KL\t\17"+
		"\2\2LM\t\3\2\2M\20\3\2\2\2NO\t\21\2\2OP\t\4\2\2PQ\t\3\2\2QR\t\3\2\2R\22"+
		"\3\2\2\2ST\7*\2\2T\24\3\2\2\2UV\7+\2\2V\26\3\2\2\2WX\7.\2\2X\30\3\2\2"+
		"\2YZ\7?\2\2Z\32\3\2\2\2[\\\t\22\2\2\\\34\3\2\2\2]_\n\23\2\2^]\3\2\2\2"+
		"_`\3\2\2\2`^\3\2\2\2`a\3\2\2\2a\36\3\2\2\2bc\t\24\2\2c \3\2\2\2\4\2`\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}