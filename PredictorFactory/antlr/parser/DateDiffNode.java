package parser;

import autogenerated.SQLParser;
import autogenerated.SQLParser.DatediffContext;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.misc.Interval;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;


// THIS IS A ROUGH IMPLEMENTATION - ONLY GETTEXT IS GUARANTEED TO WORK AS EXPECTED.
public class DateDiffNode implements TerminalNode{

	SQLParser.DatediffContext ctx;
	String text;

	public DateDiffNode(DatediffContext ctx2, String pattern) {
		ctx = ctx2;
		
		// The first content
        String dateFrom = (ctx.payload(0)).getText();
        
        // The second content
        String dateTo = (ctx.payload(1)).getText();
		
		text = modifyDateDiff(dateTo, dateFrom, pattern);
	}

	// Return the modified dateDiff
	private static String modifyDateDiff(String dateFrom, String dateTo, String pattern) {
		pattern = pattern.replace("@dateFrom", dateFrom);
		pattern = pattern.replace("@dateTo", dateTo);

		return pattern;
	}


	@Override
	public String toStringTree() {
		return ctx.toStringTree();
	}
	
	@Override
	public Object getPayload() {
		return ctx.getPayload();
	}
	
	@Override
	public int getChildCount() {
		return 0;
	}
	
	@Override
	public Interval getSourceInterval() {
		return ctx.getSourceInterval();
	}
	
	@Override
	public String toStringTree(Parser parser) {
		return ctx.toStringTree();
	}
	
	@Override
	public String getText() {
		return text;
	}
	
	@Override
	public ParseTree getParent() {
		return ctx.getParent();
	}
	
	@Override
	public ParseTree getChild(int i) {
		return ctx.getChild(i);
	}
	
	@Override
	public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
		return ctx.accept(visitor);
	}
	
	@Override
	public Token getSymbol() {
		return null;
	}
}

