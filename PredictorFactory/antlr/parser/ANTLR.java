package parser;

import autogenerated.SQLLexer;
import autogenerated.SQLParser;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

// Lex & parse the SQL.
// The first parameter is the SQL query. The second parameter is the new dateDiff string.
public class ANTLR {

	public static String parseSQL(String text, String dateDiffPattern, String corrPattern) {
		
		// Create a CharStream that reads from standard input
		ANTLRInputStream input = new ANTLRInputStream(text);
		
		// Create a lexer that feeds off of input CharStream
		SQLLexer lexer = new SQLLexer(input);
		
		// Create a buffer of tokens pulled from the lexer
		CommonTokenStream tokens = new CommonTokenStream(lexer);
		
		// Create a parser that feeds off the tokens buffer
		SQLParser parser = new SQLParser(tokens);
		ParseTree tree = parser.expression(); 				// Begin parsing at rule 'expression'
			  
		// Create a tree walker
	    ParseTreeWalker walker = new ParseTreeWalker();

		// Walk over the tree and replace dateDiff blocks with new dateDiff blocks
		DateDiffListener dateDiffListener = new DateDiffListener(dateDiffPattern) ;
	    walker.walk(dateDiffListener, tree);

		// Walk over the tree and replace corr blocks with new corr blocks
		CorrListener corrListener = new CorrListener(corrPattern) ;
		walker.walk(corrListener, tree);

	    // Return the result
	    return tree.getText();
	}


	
	
}

