package parser;

import autogenerated.SQLParser.CorrContext;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.misc.Interval;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;


// THIS IS A ROUGH IMPLEMENTATION - ONLY GETTEXT IS GUARANTEED TO WORK AS EXPECTED.
public class CorrToken implements TerminalNode{

	CorrContext ctx;
	String text;

	public CorrToken(CorrContext ctx2, String corrPattern) {
		ctx = ctx2;
		
		// The first content
        String col1 = (ctx.payload(0)).getText();
        
        // The second content
        String col2 = (ctx.payload(1)).getText();
		
		text = modifyCorr(col1, col2, corrPattern);
	}

	// Return the modified corr
	private static String modifyCorr(String col1, String col2, String corrPattern) {
		corrPattern = corrPattern.replace("@column1", col1);
		corrPattern = corrPattern.replace("@column2", col2);

		return corrPattern;
	}


	@Override
	public String toStringTree() {
		return ctx.toStringTree();
	}
	
	@Override
	public Object getPayload() {
		return ctx.getPayload();
	}
	
	@Override
	public int getChildCount() {
		return 0;
	}
	
	@Override
	public Interval getSourceInterval() {
		return ctx.getSourceInterval();
	}
	
	@Override
	public String toStringTree(Parser parser) {
		return ctx.toStringTree();
	}
	
	@Override
	public String getText() {
		return text;
	}
	
	@Override
	public ParseTree getParent() {
		return ctx.getParent();
	}
	
	@Override
	public ParseTree getChild(int i) {
		return ctx.getChild(i);
	}
	
	@Override
	public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
		return ctx.accept(visitor);
	}
	
	@Override
	public Token getSymbol() {
		return null;
	}
}

