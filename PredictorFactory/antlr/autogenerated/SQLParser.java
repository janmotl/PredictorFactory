// Generated from /Users/jan/Documents/Git/PredictorFactory/PredictorFactory/antlr/parser/SQL.g4 by ANTLR 4.5.1
package autogenerated;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		DATEDIFF=1, CORR=2, LBR=3, RBR=4, COMMA=5, TEXT=6, ARITHMETIC=7, WS=8;
	public static final int
		RULE_expression = 0, RULE_bracket = 1, RULE_datediff = 2, RULE_corr = 3, 
		RULE_payload = 4;
	public static final String[] ruleNames = {
		"expression", "bracket", "datediff", "corr", "payload"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, "'('", "')'", "','"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "DATEDIFF", "CORR", "LBR", "RBR", "COMMA", "TEXT", "ARITHMETIC", 
		"WS"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SQL.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ExpressionContext extends ParserRuleContext {
		public List<TerminalNode> TEXT() { return getTokens(SQLParser.TEXT); }
		public TerminalNode TEXT(int i) {
			return getToken(SQLParser.TEXT, i);
		}
		public List<BracketContext> bracket() {
			return getRuleContexts(BracketContext.class);
		}
		public BracketContext bracket(int i) {
			return getRuleContext(BracketContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(SQLParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(SQLParser.WS, i);
		}
		public List<TerminalNode> ARITHMETIC() { return getTokens(SQLParser.ARITHMETIC); }
		public TerminalNode ARITHMETIC(int i) {
			return getToken(SQLParser.ARITHMETIC, i);
		}
		public List<DatediffContext> datediff() {
			return getRuleContexts(DatediffContext.class);
		}
		public DatediffContext datediff(int i) {
			return getRuleContext(DatediffContext.class,i);
		}
		public List<CorrContext> corr() {
			return getRuleContexts(CorrContext.class);
		}
		public CorrContext corr(int i) {
			return getRuleContext(CorrContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLListener ) ((SQLListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLListener ) ((SQLListener)listener).exitExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(19);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DATEDIFF) | (1L << CORR) | (1L << LBR) | (1L << COMMA) | (1L << TEXT) | (1L << ARITHMETIC) | (1L << WS))) != 0)) {
				{
				setState(17);
				switch (_input.LA(1)) {
				case TEXT:
					{
					setState(10);
					match(TEXT);
					}
					break;
				case LBR:
					{
					setState(11);
					bracket();
					}
					break;
				case WS:
					{
					setState(12);
					match(WS);
					}
					break;
				case ARITHMETIC:
					{
					setState(13);
					match(ARITHMETIC);
					}
					break;
				case DATEDIFF:
					{
					setState(14);
					datediff();
					}
					break;
				case CORR:
					{
					setState(15);
					corr();
					}
					break;
				case COMMA:
					{
					setState(16);
					match(COMMA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(21);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BracketContext extends ParserRuleContext {
		public TerminalNode LBR() { return getToken(SQLParser.LBR, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RBR() { return getToken(SQLParser.RBR, 0); }
		public BracketContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLListener ) ((SQLListener)listener).enterBracket(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLListener ) ((SQLListener)listener).exitBracket(this);
		}
	}

	public final BracketContext bracket() throws RecognitionException {
		BracketContext _localctx = new BracketContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_bracket);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(22);
			match(LBR);
			setState(23);
			expression();
			setState(24);
			match(RBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatediffContext extends ParserRuleContext {
		public TerminalNode DATEDIFF() { return getToken(SQLParser.DATEDIFF, 0); }
		public TerminalNode LBR() { return getToken(SQLParser.LBR, 0); }
		public List<PayloadContext> payload() {
			return getRuleContexts(PayloadContext.class);
		}
		public PayloadContext payload(int i) {
			return getRuleContext(PayloadContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public TerminalNode RBR() { return getToken(SQLParser.RBR, 0); }
		public DatediffContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datediff; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLListener ) ((SQLListener)listener).enterDatediff(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLListener ) ((SQLListener)listener).exitDatediff(this);
		}
	}

	public final DatediffContext datediff() throws RecognitionException {
		DatediffContext _localctx = new DatediffContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_datediff);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(26);
			match(DATEDIFF);
			setState(27);
			match(LBR);
			setState(28);
			payload();
			setState(29);
			match(COMMA);
			setState(30);
			payload();
			setState(31);
			match(RBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CorrContext extends ParserRuleContext {
		public TerminalNode CORR() { return getToken(SQLParser.CORR, 0); }
		public TerminalNode LBR() { return getToken(SQLParser.LBR, 0); }
		public List<PayloadContext> payload() {
			return getRuleContexts(PayloadContext.class);
		}
		public PayloadContext payload(int i) {
			return getRuleContext(PayloadContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public TerminalNode RBR() { return getToken(SQLParser.RBR, 0); }
		public CorrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_corr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLListener ) ((SQLListener)listener).enterCorr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLListener ) ((SQLListener)listener).exitCorr(this);
		}
	}

	public final CorrContext corr() throws RecognitionException {
		CorrContext _localctx = new CorrContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_corr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(33);
			match(CORR);
			setState(34);
			match(LBR);
			setState(35);
			payload();
			setState(36);
			match(COMMA);
			setState(37);
			payload();
			setState(38);
			match(RBR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PayloadContext extends ParserRuleContext {
		public List<TerminalNode> TEXT() { return getTokens(SQLParser.TEXT); }
		public TerminalNode TEXT(int i) {
			return getToken(SQLParser.TEXT, i);
		}
		public List<BracketContext> bracket() {
			return getRuleContexts(BracketContext.class);
		}
		public BracketContext bracket(int i) {
			return getRuleContext(BracketContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(SQLParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(SQLParser.WS, i);
		}
		public List<TerminalNode> ARITHMETIC() { return getTokens(SQLParser.ARITHMETIC); }
		public TerminalNode ARITHMETIC(int i) {
			return getToken(SQLParser.ARITHMETIC, i);
		}
		public List<DatediffContext> datediff() {
			return getRuleContexts(DatediffContext.class);
		}
		public DatediffContext datediff(int i) {
			return getRuleContext(DatediffContext.class,i);
		}
		public List<CorrContext> corr() {
			return getRuleContexts(CorrContext.class);
		}
		public CorrContext corr(int i) {
			return getRuleContext(CorrContext.class,i);
		}
		public PayloadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_payload; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLListener ) ((SQLListener)listener).enterPayload(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLListener ) ((SQLListener)listener).exitPayload(this);
		}
	}

	public final PayloadContext payload() throws RecognitionException {
		PayloadContext _localctx = new PayloadContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_payload);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(48);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DATEDIFF) | (1L << CORR) | (1L << LBR) | (1L << TEXT) | (1L << ARITHMETIC) | (1L << WS))) != 0)) {
				{
				setState(46);
				switch (_input.LA(1)) {
				case TEXT:
					{
					setState(40);
					match(TEXT);
					}
					break;
				case LBR:
					{
					setState(41);
					bracket();
					}
					break;
				case WS:
					{
					setState(42);
					match(WS);
					}
					break;
				case ARITHMETIC:
					{
					setState(43);
					match(ARITHMETIC);
					}
					break;
				case DATEDIFF:
					{
					setState(44);
					datediff();
					}
					break;
				case CORR:
					{
					setState(45);
					corr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(50);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\n\66\4\2\t\2\4\3"+
		"\t\3\4\4\t\4\4\5\t\5\4\6\t\6\3\2\3\2\3\2\3\2\3\2\3\2\3\2\7\2\24\n\2\f"+
		"\2\16\2\27\13\2\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3"+
		"\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\7\6\61\n\6\f\6\16\6\64\13\6"+
		"\3\6\2\2\7\2\4\6\b\n\2\2=\2\25\3\2\2\2\4\30\3\2\2\2\6\34\3\2\2\2\b#\3"+
		"\2\2\2\n\62\3\2\2\2\f\24\7\b\2\2\r\24\5\4\3\2\16\24\7\n\2\2\17\24\7\t"+
		"\2\2\20\24\5\6\4\2\21\24\5\b\5\2\22\24\7\7\2\2\23\f\3\2\2\2\23\r\3\2\2"+
		"\2\23\16\3\2\2\2\23\17\3\2\2\2\23\20\3\2\2\2\23\21\3\2\2\2\23\22\3\2\2"+
		"\2\24\27\3\2\2\2\25\23\3\2\2\2\25\26\3\2\2\2\26\3\3\2\2\2\27\25\3\2\2"+
		"\2\30\31\7\5\2\2\31\32\5\2\2\2\32\33\7\6\2\2\33\5\3\2\2\2\34\35\7\3\2"+
		"\2\35\36\7\5\2\2\36\37\5\n\6\2\37 \7\7\2\2 !\5\n\6\2!\"\7\6\2\2\"\7\3"+
		"\2\2\2#$\7\4\2\2$%\7\5\2\2%&\5\n\6\2&\'\7\7\2\2\'(\5\n\6\2()\7\6\2\2)"+
		"\t\3\2\2\2*\61\7\b\2\2+\61\5\4\3\2,\61\7\n\2\2-\61\7\t\2\2.\61\5\6\4\2"+
		"/\61\5\b\5\2\60*\3\2\2\2\60+\3\2\2\2\60,\3\2\2\2\60-\3\2\2\2\60.\3\2\2"+
		"\2\60/\3\2\2\2\61\64\3\2\2\2\62\60\3\2\2\2\62\63\3\2\2\2\63\13\3\2\2\2"+
		"\64\62\3\2\2\2\6\23\25\60\62";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}