<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<pattern topN="1">
	<name>Aggregate frame</name>
	<description>
		Apply aggregation function on numerical attributes. In comparison to aggregate pattern, this pattern limits
		the history to the specific amount of days.

		Note: Are you getting int overflows on avg()? Cast the ints first into biginst! See:
			http://stackoverflow.com/questions/1197720/sql-server-giving-arithmetic-overflow-when-calculating-avg  
		Of course, the same remedy applies to sum() and stddev_samp().
		
		NOTE: ADDED SUM
		
		NOTE: THERE SHOULD BE A SPECIAL NAME FOR @propagationTimeColumn (dateConstrain) - the time column used for time constrain during
		base propagation.
		
		DEVELOPMENT: 
				stddev_samp, avg, min, max, sum
				1.0/2,1.0/3,1.0/4,1.0/5,0
	</description>
	<example>
		Year of first gift,
		Number of events attended,
		Year personâ€™s personal information in the database was last updated,
		Total giving in last five years.
	</example>
	<author>Jan Motl</author>
	<date>2014-10-14</date>
	<code>SELECT @baseId
			   , @baseDate
			   , @baseTarget
			   , @aggregateFunction(@numericalColumn) AS "@columnName"
	      FROM @propagatedTable
	      WHERE DATEDIFF(@baseDate, @timeColumn) &lt; @lag 
	      	AND DATEDIFF(@baseDate, @timeColumn) &gt; ((@leadFraction)*@lag)  
	      GROUP BY @baseId, @baseDate, @baseTarget
	</code>
    <parameter key="@aggregateFunction" value="stddev_samp, avg, min, max, sum"/>
   
    <optimize key="@lag" min="0" max="240" integerValue="true" iterationLimit="13"/>
    <optimize key="@leadFraction" min="0" max="0.8" integerValue="false" iterationLimit="9"/>
	<cardinality>n</cardinality>
</pattern>
