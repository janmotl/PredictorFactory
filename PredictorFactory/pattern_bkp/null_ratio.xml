<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<pattern>
	<name>Ratio of missing values</name>
	<description>
		Real-world data commonly contain contain missing values. And sometimes they are not missing at random. 
		Thus we mine them.

		This pattern has a good predictive power/runtime ratio.
		 
		Technical note: NULL values are not commonly accounted in count(@column) function. Hence we exploit it. 
		An alternative is to use "case then" but that is slower.
		
		Do not confuse this pattern with aggregation or num_children. Aggregation is only for numerical attributes. 
		And num_children works on table level. Also note that direct_field takes care of the scenario where 
		cardinality==1. 
	</description>
	<example>
		In Titanic dataset passengers with missing age are more likely to die. This is because information about 
		the customers' age was obtained after Titanic's sinking. And it was easier to obtain this information from 
		the survivals than from the victims.   
	</example>
	<author>Jan Motl</author>
	<date>2014-12-30</date>
	<code>SELECT @baseId
			   , @baseDate
			   , @baseTarget
			   , coalesce((count(*) - count(@column)) / count(*), 0) AS "@columnName"
	      FROM @propagatedTable
	      GROUP BY @baseId, @baseDate, @baseTarget
	</code>
	<parameter key="@column" value="@nominalColumn, @numericalColumn, @timeColumn"/>
	<cardinality>n</cardinality>
</pattern>
