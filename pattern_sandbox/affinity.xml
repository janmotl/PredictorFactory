<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<pattern>
	<name>Affinity2</name>
	<description>
		Similar to WoE, but without normalization and transformation with logarithm. For decision trees it should be
		as informative as WoE, but the calculation should be faster. For interpretability or logistic regression, WoE
		is still preferred.
		
		Note: 
		  - Dependent on target (nominal/numerical).
		  - The inner table should be calculated just once per table.
		  - Multiple columns could be returned.		
		  - Weighting: weight=(count(*))^0.5; score=sum(t2.b*t2.weight)/sum(t2.a*t2.weight); doesn't improve Chi2 

		Empirical comparison of WoE and affinity is in: http://papers.ssrn.com/sol3/papers.cfm?abstract_id=1918410
		The conclusion of the article is that WoE is preferable for logistic regression by 4% on AUC.
		For decision tree based algorithms the difference is on average equal zero.

		NOTE: CURRENTLY WORKS ONLY FOR NOMINAL TARGETS (VALUES ARE IN SINGLE QUOTES).
		
		NOTE: Laplace regularization by 1 should not be applied on average, but sum!  
		
		NOTE: Could have been rewritten with selects and where conditions. But then how to perform join, where
		null values are equal?  
		
		Warning:
			This pattern is using target values in the calculation. Be careful with splitting of the data into
			training and testing part.  
			
		Evaluation: Can be incredibly slow on Oracle.
	</description>
	<author>Jan Motl</author>
	<date>2014-12-30</date>
	<code>SELECT t1.@baseId
			   , t1.@baseDate
			   , t1.@baseTarget
			   , sum(t2.b)/sum(t2.a) as "@columnName"
		  FROM @propagatedTable t1
		  INNER JOIN (
				SELECT @nominalColumn
					 , avg(case when @baseTarget = '@targetValue' then 1 else 0 end)+1 as a
					 , avg(case when @baseTarget &lt;&gt; '@targetValue' then 1 else 0 end)+1 as b
				FROM @propagatedTable
				GROUP BY @nominalColumn
			) t2
		  ON t1.@nominalColumn = t2.@nominalColumn
		  GROUP BY @baseId, @baseDate, @baseTarget
	</code>
	<cardinality>n</cardinality>
</pattern>
